name: FULL-lossless-cut-Build/release

on:
  workflow_dispatch:
    inputs:
      tmate_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  release:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    env:
      is_tag: ${{ startsWith(github.ref, 'refs/tags/v') }}
      SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
#        os: [windows-latest]

    steps:
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.tmate_enabled }}
        with:
          detached: true
  
        # Windows fix. See https://github.com/actions/checkout/issues/226
      - run: git config --global core.autocrlf false

      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      # This global ffmpeg is used for screenshots (see below)
      - uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release
          # arm not yet supported on macos
          architecture: ${{ matrix.os == 'macos-latest' && 'x64' || '' }}
          # Linking type of the binaries. Use "shared" to download shared binaries and 
          # "static" for statically linked ones. Shared builds are currently only available
          # for windows releases. Defaults to "static"
          linking-type: static
          # As of version 3 of this action, builds are no longer downloaded from GitHub
          # except on Windows: https://github.com/GyanD/codexffmpeg/releases.
          github-token: ${{ github.server_url == 'https://github.com' && github.token || '' }}

      - run: ffmpeg -version

       # Because of timeout issue https://github.com/yarnpkg/yarn/issues/4890
      - run: yarn install --immutable --network-timeout 1000000

      - name: (Linux) Install and login to Snapcraft
        uses: samuelmeuli/action-snapcraft@v2
        if: startsWith(matrix.os, 'ubuntu')

      - name: Save provisioning profile
        if: startsWith(matrix.os, 'macos')
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode > LosslessCut_Mac_App_Store_provisioning_profile.provisionprofile
      - name: (MacOS) Prepare Apple API key
        # Import Apple API key for uploading to Mac App Store and for notarization
        if: startsWith(matrix.os, 'macos')
        run: |
          mkdir -p ~/.appstoreconnect/private_keys/
          echo '${{ secrets.api_key }}' > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.api_key_id }}.p8
      - name: (MacOS) Download ffmpeg
        if: startsWith(matrix.os, 'macos')
        run: |
          yarn download-ffmpeg-darwin-x64
          yarn download-ffmpeg-darwin-arm64
      - name: (Windows) Download ffmpeg
        if: startsWith(matrix.os, 'windows')
        run: yarn download-ffmpeg-win32-x64

      - name: (Linux) Download ffmpeg
        if: startsWith(matrix.os, 'ubuntu')
        run: yarn download-ffmpeg-linux-x64

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ env.is_tag == 'true' }}

          max_attempts: 1

          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}

# Temporary 30 day certificate, not needed for Microsoft Store
#          windows_certs: ${{ secrets.windows_certs }}
#          windows_certs_password: ${{ secrets.windows_certs_password }}
        env:
          APPLE_API_KEY: ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.api_key_id }}.p8
          APPLE_API_KEY_ID: ${{ secrets.api_key_id }}
          APPLE_API_ISSUER: ${{ secrets.api_key_issuer_id }}

      - run: npx tsx script/e2e.mts 'dist/mac-arm64/LosslessCut.app/Contents/MacOS/LosslessCut' 0:none screenshot.jpeg
        if: startsWith(matrix.os, 'macos')

      - run: npx tsx script/e2e.mts 'dist\win-unpacked\LosslessCut.exe' desktop screenshot.jpeg
        if: startsWith(matrix.os, 'windows')

      - run: |
          export DISPLAY=:0
          sudo Xvfb -ac :0 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          sleep 5
          chmod +x dist/linux-unpacked/losslesscut
          npx tsx script/e2e.mts 'dist/linux-unpacked/losslesscut' ':0.0+0,0' screenshot.jpeg
        if: startsWith(matrix.os, 'ubuntu')
      - name: (MacOS) Upload to Mac App Store
        if: startsWith(matrix.os, 'macos') && env.is_tag == 'true'
        run: |
          npx tsx script/xcrun-wrapper.mts dist/mas-universal/LosslessCut-mac-universal.pkg ${{ secrets.api_key_id }} ${{ secrets.api_key_issuer_id }} 1552674375 no.mifi.losslesscut-mac
      - name: (MacOS) Upload artifacts
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'macos') && env.is_tag == 'false'
        with:
          name: MacOS
          path: |
            dist/LosslessCut-mac-arm64.dmg
            dist/LosslessCut-mac-x64.dmg
            screenshot.jpeg
      - name: (Windows) Upload artifacts
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'windows') && env.is_tag == 'false'
        with:
          name: Windows
          path: |
            dist/LosslessCut-win-x64.7z
            screenshot.jpeg
      - name: (Linux) Upload artifacts
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'ubuntu') && env.is_tag == 'false'
        with:
          name: Linux
          path: |
            dist/LosslessCut-linux-arm64.tar.bz2
            dist/LosslessCut-linux-armv7l.tar.bz2
            dist/LosslessCut-linux-x64.tar.bz2
            screenshot.jpeg
